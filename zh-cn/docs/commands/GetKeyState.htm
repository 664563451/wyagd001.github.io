<!DOCTYPE HTML>
<html>
<head>
<title>GetKeyState / GetKeyState()</title>
<meta name="description" content="在这个免费的宏程序中使用 GetKeyState 可以方便地检查键盘按键或鼠标/操纵杆按钮当前是否按下或放开.">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>GetKeyState / GetKeyState()</h1>
<p>检查键盘按键或鼠标/操纵杆按钮是否按下或放开. 也可以获取操纵杆的状态.</p>

<h2 id="command">GetKeyState</h2>
<p class="warning"><strong>Deprecated:</strong> This command is not recommended for use in new scripts. Use the <a href="#function">GetKeyState</a> function instead.</p>

<pre class="Syntax">
<span class="func">GetKeyState</span>, OutputVar, KeyName <span class="optional">, Mode</span>
</pre>
<h3>参数</h3>
<dl>

  <dt>OutputVar</dt>
  <dd><p>The name of the variable in which to store the retrieved key state, which is either D for down or U for up. The variable will be empty (blank) if the state of the key could not be determined. For the joystick's special keys such as axes and POV switch, <a href="#joystick">other values are retrieved</a>.</p>
      </dd>

  <dt>KeyName</dt>
  <dd><p>This can be just about any single character from the keyboard or one of the key names from the <a href="../KeyList.htm">key list</a>, such as a mouse/joystick button. Examples: B, 5, LWin, RControl, Alt, Enter, Escape, LButton, MButton, Joy1.</p>
      <p>Alternatively, an explicit virtual key code such as vkFF may be specified. This is useful in the rare case where a key has no name. The virtual key code of such a key can be determined by following the steps at the bottom of the <a href="../KeyList.htm#SpecialKeys">key list page</a>.</p> 
      <p><b>Known limitation:</b> This command cannot differentiate between two keys which share the same virtual key code, such as Left and NumpadLeft.</p></dd>

  <dt>Mode</dt>
  <dd><p>This parameter is ignored when retrieving joystick status.</p>
      <p>If omitted, the mode will default to that which retrieves the logical state of the key. This is the state that the OS and the active window believe the key to be in, but is not necessarily the same as the physical state.</p>
	  <p>Alternatively, one of these letters may be specified:</p>
      <p><strong>P</strong>: Retrieve the physical state (i.e. whether the user is physically holding it down). The physical state of a key or mouse button will usually be the same as the logical state unless the keyboard and/or mouse hooks are installed, in which case it will accurately reflect whether or not the user is physically holding down the key or button (as long as it was pressed down while the script was running). You can determine if your script is using the  hooks via the <a href="KeyHistory.htm">KeyHistory</a> command or menu item. You can force the hooks to be installed by adding the <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a> and/or <a href="_InstallMouseHook.htm">#InstallMouseHook</a> directives to the script.</p>
      <p><strong>T</strong>: Retrieve the toggle state (only valid for  keys that can be toggled such as CapsLock, NumLock, ScrollLock, and Insert). A retrieved value of D means the key is &quot;on&quot;, while U means it's &quot;off&quot;.</p>
    </dd>

</dl>

<h2 id="function">GetKeyState()</h2>

<pre class="Syntax">
KeyIsDown := <span class="func">GetKeyState</span>(KeyName <span class="optional">, Mode</span>)
</pre>
<h3>Parameters</h3>
<dl>

  <dt>KeyName</dt>
  <dd><p>此参数可以是键盘中任何的单个字符或 <a href="../KeyList.htm">按键列表</a> 中的其中一个键名, 例如鼠标/操纵杆按钮. 例如: B, 5, LWin, RControl, Alt, Enter, Escape, LButton, MButton, Joy1.</p>
      <p>或者, 可以指定明确的虚拟按键代码, 例如 vkFF. 只有在一个按键没有指定名称这样少见的情况下, 这种方法才有用. 这种按键的虚拟按键代码可以通过<a href="../KeyList.htm#SpecialKeys">按键列表页面</a>底部的步骤来确定.</p> 
      <p><b>已知限制:</b> 此函数无法区别共享相同虚拟按键代码的两个按键, 例如 Left 和 NumpadLeft.</p></dd>

  <dt>Mode</dt>
  <dd><p>获取操纵杆状态时, 此参数被忽略.</p>
      <p>如果省略, 则默认的模式是获取按键的逻辑状态. 这是操作系统和活动窗口所认为的按键所处的状态, 但可能和它的物理状态不一致.</p>
	  <p>或者, 可以指定这些字母的其中一个:</p>
      <p><strong>P</strong>: 获取物理状态(即用户是否实际按住了按键). 如果没有安装键盘和/或鼠标钩子, 则按键或鼠标按钮的物理状态通常和逻辑状态一致(有时逻辑状态可能比物理状态滞后); 如果安装了钩子, 则它会准确反映出用户是否按下了按键或鼠标按钮(只要在脚本执行时它正被按住). 您可以通过 <a href="KeyHistory.htm">KeyHistory</a> 命令或菜单项确定脚本中是否使用了钩子. 通过添加 <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a> 和/或 <a href="_InstallMouseHook.htm">#InstallMouseHook</a> 指令到脚本中您可以强制安装钩子.</p>
      <p><strong>T</strong>: 获取切换状态(仅对可以切换的按键才有效, 例如 CapsLock, NumLock, ScrollLock 和 Insert). 获取的值为 D 表明按键是打开的, 而 U 表明它是关闭的(不过 GetKeyState() 函数当打开时返回 true (1) 而关闭时返回 false (0)).</p>
    </dd>

</dl>

<h3>返回值</h3>
<p>This function returns 1 if the key is down (or toggled on) or 0 if it is up (or toggled off). For the joystick's special keys such as axes and POV switch, <a href="#joystick">other values are retrieved</a>.</p>
<p>If <em>KeyName</em> is invalid or the state of the key could not be determined, an empty string is returned.</p>

<h2 id="joystick">Joystick's special keys</h2>
<p>When <em>KeyName</em> is a joystick axis such as JoyX, the retrieved value will be a floating point number between 0 and 100 to indicate the joystick's position as a percentage of that axis's range of motion. The format of the number can be changed via <a href="SetFormat.htm">SetFormat</a>. This <a href="../scripts/JoystickTest.htm">test script</a> can be used to analyze your joystick(s).</p>
<p>当 <em>KeyName</em> 为 JoyPOV 时, 获取的值将介于 0 和 35900 之间. 许多操纵杆使用与下列近似的 POV 值:</p>
<ul>
  <li>-1: 没有角度</li>
  <li>0: 向前 POV</li>
  <li>9000(即 90 度): 向右 POV</li>
  <li>27000(即 270 度): 向左 POV</li>
  <li>18000(即 180 度): 向后 POV</li>
</ul>

<h2>备注</h2>
<p>为了等待按键或鼠标/操纵杆按钮进入新的状态, 通常用 <a href="KeyWait.htm">KeyWait</a> 代替 GetKeyState 的循环会更简单.</p>
<p>带有不常见键盘驱动的系统更新按键的状态可能比较慢, 尤其是像 CapsLock 这样按键的切换状态. 在按键状态改变后立即对其状态进行检查的脚本可以预先使用 <a href="Sleep.htm">Sleep</a>, 以便系统有时间更新按键的状态.</p>
<p>关于对操纵杆使用 GetKeyState 的例子, 请参阅 <a href="../misc/RemapJoystick.htm">操纵杆重映射页面</a> 和 <a href="../scripts/JoystickMouse.htm">操纵杆到鼠标的映射脚本</a>.</p>
<h2>相关</h2>
<p><a href="KeyWait.htm">KeyWait</a>, <a href="../KeyList.htm">按键列表</a>, <a href="../misc/RemapJoystick.htm">操纵杆重映射</a>, <a href="KeyHistory.htm">KeyHistory</a>, <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a>, <a href="_InstallMouseHook.htm">#InstallMouseHook</a></p>

<h2>示例</h2>

<h4 id="ex1">Example #1: Command vs. function</h4>
<p>Although the first code block uses the command and the second one uses the function, these two blocks are functionally identical:</p>
<pre>GetKeyState, state, RButton  <em>; Right mouse button.</em>
GetKeyState, state, Joy2  <em>; 第一个操纵杆的第二个按钮.</em>

GetKeyState, state, Shift
if state = D
    MsgBox At least one Shift key is down.
else
    MsgBox Neither Shift key is down.

GetKeyState, state, CapsLock, T <em>;  当 CapsLock 打开时为 D, 否则为 U.</em>
</pre>
<pre>state := GetKeyState("RButton")  <em>; Right mouse button.</em>
state := GetKeyState("Joy2")  <em>; The second button of the first joystick.</em>

if GetKeyState("Shift")
    MsgBox At least one Shift key is down.
else
    MsgBox Neither Shift key is down.

state := GetKeyState("CapsLock", "T") <em>; True if CapsLock is ON, false otherwise.</em>
</pre>

<h4 id="ex2">Example #2: Remapping</h4>
<p>(This example is only for illustration because it would be easier to use the <a href="../misc/Remap.htm">built-in remapping feature</a>.) In the following hotkey, the mouse button is kept held down while NumpadAdd is down, which effectively transforms NumpadAdd into a mouse button. This method can also be used to repeat an action while the user is holding down a key or button:</p>
<pre>*NumpadAdd::
MouseClick, left,,, 1, 0, D  <em>; 按住鼠标左键.</em>
Loop
{
    Sleep, 10
    if !GetKeyState("NumpadAdd", "P")  <em>; 按键已经被释放, 所以退出循环.</em>
        break
    <em>; ... 此处放置您想要重复的任何动作.</em>
}
MouseClick, left,,, 1, 0, U  <em>; 释放鼠标按钮.</em>
return</pre>

<h4 id="ex3">Example #3</h4>
<p>Make joystick button behavior depend on joystick axis position:</p>
<pre>joy2::
JoyX := GetKeyState("JoyX")
if Joyx &gt; 75 
    MsgBox Action #1 (button pressed while joystick was pushed to the right).
else if Joyx &lt; 25 
    MsgBox Action #2 (button pressed while joystick was pushed to the left).
else
    MsgBox Action #3 (button pressed while joystick was centered horizontally).
return
</pre>

<h4 id="ex-other">Other examples</h4>
<p>请参阅 <a href="../misc/RemapJoystick.htm">操纵杆重映射页面</a> 和 <a href="../scripts/JoystickMouse.htm">操纵杆到鼠标的映射脚本</a> 查看其他示例.</p>

</body>
</html>
